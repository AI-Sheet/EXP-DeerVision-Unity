using System;
using System.Collections.Generic;
using UnityEngine;
using Gymize;
using NumSharp;

/// <summary>
/// RL-–∞–≥–µ–Ω—Ç –æ–ª–µ–Ω—è –¥–ª—è Gymize/Unity ML ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç DeerVision, DeerCognitiveMap,
/// ManualRigidbodyController –∏ HeadYaw (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏–º –æ–±—ä–µ–∫—Ç–æ–º-–≥–æ–ª–æ–≤–æ–π)
/// –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è FoodZone –∏ NumSharp.NDArray
/// </summary>
[RequireComponent(typeof(DeerVision))]
[RequireComponent(typeof(ManualRigidbodyController))]
public class DeerAgentRL : Agent
{
    [Header("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")]
    public GameObject headObject; // –î–æ—á–µ—Ä–Ω–∏–π –æ–±—ä–µ–∫—Ç - –≥–æ–ª–æ–≤–∞ (–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ yaw)
    private DeerVision _vision;
    private ManualRigidbodyController _controller;

    [Header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã RL —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")]
    public float headYawMin = -35f;
    public float headYawMax = 35f;
    public float headYawSpeed = 100f; // –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Å–µ–∫
    public float headPitchMin = -20f;
    public float headPitchMax = 20f;
    public float headPitchSpeed = 60f; // –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Å–µ–∫
    private float desiredHeadPitch = 0f;

    [Header("üçé –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ù–ê–ì–†–ê–î - –¢–û–õ–¨–ö–û –ï–î–ê!")]
    // === –û–ì–†–û–ú–ù–´–ï –ù–ê–ì–†–ê–î–´ - –¢–û–õ–¨–ö–û –ó–ê –ï–î–£! ===
    public float rewardPerFoodEaten = 100.0f;            // –û–ì–†–û–ú–ù–ê–Ø –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å—ä–µ–¥–µ–Ω–Ω—É—é –µ–¥—É!
    public float rewardPerMemoryFoodEaten = 120.0f;      // –ï–©–ï –ë–û–õ–¨–®–ï –∑–∞ –µ–¥—É —á–µ—Ä–µ–∑ –ø–∞–º—è—Ç—å!
    
    // === –ë–û–õ–¨–®–ò–ï –ù–ê–ì–†–ê–î–´ - –ó–ê –ü–†–û–ì–†–ï–°–° –ö –ï–î–ï ===
    public float rewardPerFoodApproach = 10.0f;          // –ë–û–õ–¨–®–ê–Ø –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –µ–¥–µ!
    public float rewardPerFoodDiscovery = 15.0f;         // –ë–û–õ–¨–®–ê–Ø –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –µ–¥—ã
    public float rewardForSeeingFood = 0.5f;             // –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤–∏–¥–µ–Ω–∏–µ –µ–¥—ã
    
    // === –ú–ò–ö–†–û–°–ö–û–ü–ò–ß–ï–°–ö–ò–ï –ù–ê–ì–†–ê–î–´ - –ó–ê –í–°–ï –û–°–¢–ê–õ–¨–ù–û–ï ===
    public float rewardPerMovement = 0.001f;             // –ö–†–û–®–ï–ß–ù–ê–Ø –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ
    public float rewardPerExploration = 0.0f;            // –ù–ï–¢ –Ω–∞–≥—Ä–∞–¥ –∑–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ!
    
    // === –ñ–ï–°–¢–û–ö–ò–ï –®–¢–†–ê–§–´ ===
    public float penaltyPerCollision = 0.0f;             // –ë–ï–ó —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è!
    public float penaltyPerIdle = -0.1f;                 // –ú–∞–ª–µ–Ω—å–∫–∏–π —à—Ç—Ä–∞—Ñ –∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ
    public float penaltyForNoFood = -50.0f;               // –û–ì–†–û–ú–ù–´–ô —à—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –µ–¥—ã
    public float penaltyForJitter = 0.0f;                // –ë–ï–ó —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ –¥–µ—Ä–≥–∞–Ω–æ—Å—Ç—å
    public float penaltyForAvoidingFood = -10.0f;        // –ù–û–í–´–ô: –®—Ç—Ä–∞—Ñ –∑–∞ –∏–∑–±–µ–≥–∞–Ω–∏–µ –µ–¥—ã
    
    // === –ù–ê–°–¢–†–û–ô–ö–ò ===
    public float timeWithoutFoodThreshold = 10f;         // –í—Ä–µ–º—è –¥–æ —à—Ç—Ä–∞—Ñ–∞ –∑–∞ –≥–æ–ª–æ–¥
    public float foodApproachThreshold = 0.5f;           // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã
    public float movementThreshold = 0.2f;               // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è "–¥–≤–∏–∂–µ–Ω–∏—è"
    
    [Header("–ê–Ω—Ç–∏-—Ñ–∞—Ä–º —Å–∏—Å—Ç–µ–º–∞")]
    public float penaltyForIdleStaring = -1.3f;          // –®—Ç—Ä–∞—Ñ –∑–∞ –¥–æ–ª–≥–æ–µ —Å–º–æ—Ç—Ä–µ–Ω–∏–µ –Ω–∞ –µ–¥—É –±–µ–∑ –¥–≤–∏–∂–µ–Ω–∏—è
    public int maxStepsLookingAtFood = 100;               // –ú–∞–∫—Å–∏–º—É–º —à–∞–≥–æ–≤ —Å–º–æ—Ç—Ä–µ–Ω–∏—è –Ω–∞ –µ–¥—É –±–µ–∑ —à—Ç—Ä–∞—Ñ–∞
    public float foodDiscoveryRadius = 5f;               // –†–∞–¥–∏—É—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "—Ç–æ–π –∂–µ" –µ–¥—ã

    [Header("Action Smoothing & Delay")]
    public int actionRepeat = 3;
    [Range(0f, 1f)]
    public float actionSmoothing = 0.5f;

    private float desiredHeadYaw = 0f;
    private HashSet<Vector2Int> visitedCells = new HashSet<Vector2Int>();
    private Vector3 lastPosition;
    private DeerCognitiveMap cogMap => DeerCognitiveMap.Instance;

    private List<float> lastAction = new List<float>() { 0, 0, 0, 0, 0 };
    private List<float> smoothedAction = new List<float>() { 0, 0, 0, 0, 0 };
    private int actionRepeatCounter = 0;

    private List<float> prevAction = new List<float>() { 0, 0, 0, 0, 0 };
    private float jitterSum = 0f;

    [NonSerialized] public bool foodTakenByHead = false;
    [NonSerialized] public bool foodTakenByMemory = false;

    private float lastHeadYaw = 0f;
    private float lastBodyYaw = 0f;

    private float lastFoodTime = 0f;
    private int consecutiveIdleSteps = 0;
    
    // –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞ –µ–¥—É
    private HashSet<Vector3> discoveredFoodPositions = new HashSet<Vector3>();
    private float lastDistanceToFood = -1f;

    public override void OnReset()
    {
        UnityEngine.SceneManagement.SceneManager.LoadScene(
            UnityEngine.SceneManagement.SceneManager.GetActiveScene().name,
            UnityEngine.SceneManagement.LoadSceneMode.Single
        );
        visitedCells.Clear();
        lastPosition = transform.position;
        lastAction = new List<float>() { 0, 0, 0, 0, 0 };
        smoothedAction = new List<float>() { 0, 0, 0, 0, 0 };
        prevAction = new List<float>() { 0, 0, 0, 0, 0 };
        actionRepeatCounter = 0;
        jitterSum = 0f;
        foodTakenByHead = false;
        foodTakenByMemory = false;
        lastHeadYaw = _vision != null ? _vision.headYaw : 0f;
        lastBodyYaw = transform.eulerAngles.y;
        lastFoodTime = Time.time;
        consecutiveIdleSteps = 0;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–∞–¥ –∑–∞ –µ–¥—É
        discoveredFoodPositions.Clear();
        lastDistanceToFood = -1f;
    }

    void Awake()
    {
        _vision = GetComponent<DeerVision>();
        _controller = GetComponent<ManualRigidbodyController>();
        lastPosition = transform.position;
        if (headObject == null)
            Debug.LogWarning("HeadObject (–≥–æ–ª–æ–≤–∞) –Ω–µ –∑–∞–¥–∞–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–µ –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π –æ–±—ä–µ–∫—Ç –æ—Ç —Ç–µ–ª–∞ –∞–≥–µ–Ω—Ç–∞.");
        lastHeadYaw = _vision != null ? _vision.headYaw : 0f;
        lastBodyYaw = transform.eulerAngles.y;
        lastFoodTime = Time.time;
        consecutiveIdleSteps = 0;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–∞–¥ –∑–∞ –µ–¥—É
        discoveredFoodPositions = new HashSet<Vector3>();
        lastDistanceToFood = -1f;
    }

    public override void OnAction(object action)
    {
        List<float> act = ParseAction(action);

        if (act.Count < 5)
            throw new ArgumentException($"Action for DeerAgentRL must have at least 5 elements, got {act.Count}");

        // --- Action Repeat ---
        if (actionRepeatCounter > 0)
        {
            act = new List<float>(lastAction); // –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            actionRepeatCounter--;
        }
        else
        {
            // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
            for (int i = 0; i < act.Count; i++)
            {
                smoothedAction[i] = actionSmoothing * smoothedAction[i] + (1 - actionSmoothing) * act[i];
            }
            lastAction = new List<float>(smoothedAction);
            actionRepeatCounter = actionRepeat - 1;
            act = new List<float>(smoothedAction);
        }

        // --- Jitter (–¥–µ—Ä–≥–∞–Ω–æ—Å—Ç—å) ---
        float jitter = 0f;
        for (int i = 0; i < act.Count; i++)
        {
            jitter += Mathf.Abs(act[i] - prevAction[i]);
        }
        jitterSum += jitter;
        prevAction = new List<float>(act);

        float move = Mathf.Clamp(act[0], -1f, 1f);
        float turn = Mathf.Clamp(act[1], -1f, 1f);
        float speed = Mathf.Clamp01(act[2]);
        float headDeltaNorm = Mathf.Clamp(act[3], -1f, 1f);

        _controller.SetRLInputs(move, turn, false, speed);

        // --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ–≤–æ–π (yaw) ---
        float headYawDelta = headDeltaNorm * headYawSpeed * Time.deltaTime;
        desiredHeadYaw = Mathf.Clamp(_vision.headYaw + headYawDelta, headYawMin, headYawMax);
        _vision.headYaw = desiredHeadYaw;
        float headPitchDeltaNorm = Mathf.Clamp(act[4], -1f, 1f);
        float headPitchDelta = headPitchDeltaNorm * headPitchSpeed * Time.deltaTime;
        desiredHeadPitch = Mathf.Clamp(_vision.headPitch + headPitchDelta, headPitchMin, headPitchMax);
        _vision.headPitch = desiredHeadPitch;
        if (headObject != null)
        {
            Vector3 localRot = headObject.transform.localEulerAngles;
            localRot.y = desiredHeadYaw;
            localRot.x = desiredHeadPitch;
            headObject.transform.localEulerAngles = localRot;
        }
    }

    private List<float> ParseAction(object action)
    {
        if (action is List<object> lo)
            return lo.ConvertAll(Convert.ToSingle);
        if (action is List<float> lf)
            return lf;
        if (action is float[] fa)
            return new List<float>(fa);
        if (action is double[] da)
        {
            var l = new List<float>(da.Length);
            foreach (var d in da) l.Add((float)d);
            return l;
        }
        if (action is NumSharp.NDArray nda)
        {
            var arr = nda.ToArray<float>();
            return new List<float>(arr);
        }
        if (action is object[] oa)
        {
            var l = new List<float>(oa.Length);
            foreach (var o in oa) l.Add(Convert.ToSingle(o));
            return l;
        }
        // Fallback: NDArray —á–µ—Ä–µ–∑ reflection (–µ—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ object)
        if (action != null && action.GetType().FullName.Contains("NumSharp.NDArray"))
        {
            var method = action.GetType().GetMethod("ToArray", new Type[] { typeof(Type) });
            if (method != null)
            {
                var arrObj = method.Invoke(action, new object[] { typeof(float) }) as Array;
                if (arrObj != null)
                {
                    var l = new List<float>(arrObj.Length);
                    for (int i = 0; i < arrObj.Length; i++)
                        l.Add(Convert.ToSingle(arrObj.GetValue(i)));
                    return l;
                }
            }
            method = action.GetType().GetMethod("ToArray", Type.EmptyTypes);
            if (method != null)
            {
                var arrObj = method.Invoke(action, null) as Array;
                if (arrObj != null)
                {
                    var l = new List<float>(arrObj.Length);
                    for (int i = 0; i < arrObj.Length; i++)
                        l.Add(Convert.ToSingle(arrObj.GetValue(i)));
                    return l;
                }
            }
            throw new ArgumentException("NumSharp NDArray could not be converted to float[]");
        }
        throw new ArgumentException($"Invalid action format for DeerAgentRL: {action?.GetType()}");
    }

    public object CollectObservations()
    {
        var result = new Dictionary<string, object>();

        result["obs_vision"] = _vision.GetMemoryObservation();
        result["head_yaw"] = _vision.headYaw / headYawMax;
        result["head_pitch"] = _vision.headPitch / headPitchMax;
        result["position"] = new float[] { transform.position.x, transform.position.z };

        if (cogMap != null)
        {
            Vector2Int cell = WorldToCell(transform.position, cogMap.cellSize);
            visitedCells.Add(cell);
            result["visited"] = visitedCells.Count;
        }
        else
        {
            result["visited"] = 0;
        }

        var foodMem = _vision.GetClosestMemory(2);
        if (foodMem != null)
        {
            float dist = Vector3.Distance(transform.position, foodMem.position);
            Vector3 toFood = foodMem.position - transform.position;
            float angle = Vector3.SignedAngle(
                Quaternion.Euler(0, _vision.headYaw, 0) * transform.forward,
                toFood, Vector3.up
            );
            result["food_in_memory"] = new float[] { 1, dist, angle / 180f };
        }
        else
        {
            result["food_in_memory"] = new float[] { 0, -1f, 0f };
        }

        var obs3d = _vision.GetObservation();
        result["obs_3d"] = obs3d;

        var focusObs = _vision.CollectFocusObservation();
        result["focus_obs"] = focusObs;

        if (_vision.foundFeatures != null)
        {
            List<float[]> featuresList = new List<float[]>();
            foreach (var f in _vision.foundFeatures)
                featuresList.Add(f.features);
            result["raw_features"] = featuresList;
        }

        return result;
    }

    public float GetReward()
    {
        float reward = 0f;
        Vector3 currentPosition = transform.position;
        Vector3 currentVelocity = (currentPosition - lastPosition) / Time.deltaTime;
        float currentSpeed = currentVelocity.magnitude;
        bool isMoving = currentSpeed > movementThreshold;
        
        // === 1. –ë–ê–ó–û–í–ê–Ø –ù–ê–ì–†–ê–î–ê –ó–ê –î–í–ò–ñ–ï–ù–ò–ï (–∞–Ω—Ç–∏-idle) ===
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –µ—Å—Ç –ª–∏ –æ–ª–µ–Ω—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
        bool isCurrentlyEating = false;
        if (headObject != null)
        {
            var headCol = headObject.GetComponent<Collider>();
            if (headCol != null)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –ª—é–±–æ–π FoodZone
                var foodZones = FindObjectsByType<FoodZone>(FindObjectsSortMode.None);
                foreach (var zone in foodZones)
                {
                    if (zone.GetComponent<Collider>().bounds.Intersects(headCol.bounds))
                    {
                        isCurrentlyEating = true;
                        break;
                    }
                }
            }
        }
        
        if (isMoving)
        {
            reward += rewardPerMovement * currentSpeed; // –ë–æ–ª—å—à–µ –¥–≤–∏–∂–µ–Ω–∏—è = –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥—ã
            consecutiveIdleSteps = 0;
        }
        else
        {
            consecutiveIdleSteps++;
            // –®–¢–†–ê–§ –∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ù–ï –µ—Å—Ç –µ–¥—É
            if (!isCurrentlyEating && consecutiveIdleSteps > 20) // ~2 —Å–µ–∫—É–Ω–¥—ã –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
            {
                float idlePenalty = penaltyPerIdle * (1f + consecutiveIdleSteps * 0.05f);
                reward += idlePenalty;
            }
            // –ï—Å–ª–∏ –µ—Å—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
            else if (isCurrentlyEating)
            {
                consecutiveIdleSteps = 0;
            }
        }
        
        // === 2. –ù–ï–¢ –ù–ê–ì–†–ê–î –ó–ê –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï! –¢–û–õ–¨–ö–û –ï–î–ê! ===
        // –£–±–∏—Ä–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ - –æ–ª–µ–Ω—å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –¢–û–õ–¨–ö–û –Ω–∞ –µ–¥–µ
        if (cogMap != null)
        {
            var cell = WorldToCell(currentPosition, cogMap.cellSize);
            visitedCells.Add(cell); // –ü—Ä–æ—Å—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º, –Ω–æ –ù–ï –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
        }

        // === 3. –°–ò–°–¢–ï–ú–ê –ù–ê–ì–†–ê–î –ó–ê –ï–î–£ - –¢–û–õ–¨–ö–û –ó–ê –†–ï–ê–õ–¨–ù–´–ô –ü–†–û–ì–†–ï–°–°! ===
        bool currentlySeesFood = false;
        Vector3 closestVisibleFood = Vector3.zero;
        float closestFoodDistance = float.MaxValue;
        
        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –≤–∏–¥–∏–º—É—é –µ–¥—É
        if (_vision.foundFeatures != null)
        {
            foreach (var f in _vision.foundFeatures)
            {
                if (f.type == 2) // –µ–¥–∞
                {
                    currentlySeesFood = true;
                    float dist = Vector3.Distance(currentPosition, f.position);
                    if (dist < closestFoodDistance)
                    {
                        closestFoodDistance = dist;
                        closestVisibleFood = f.position;
                    }
                }
            }
        }
        
        // –ù–ê–ì–†–ê–î–´ –ó–ê –ï–î–£ - –ë–û–õ–ï–ï –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –ú–û–¢–ò–í–ê–¶–ò–Ø!
        if (currentlySeesFood)
        {
            // 1. –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ü–ï–†–í–û–ï –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –µ–¥—ã (–¥–∞–∂–µ –±–µ–∑ –¥–≤–∏–∂–µ–Ω–∏—è)
            bool isNewFood = true;
            foreach (var discoveredPos in discoveredFoodPositions)
            {
                if (Vector3.Distance(closestVisibleFood, discoveredPos) < foodDiscoveryRadius)
                {
                    isNewFood = false;
                    break;
                }
            }
            
            if (isNewFood)
            {
                reward += rewardPerFoodDiscovery; // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –µ–¥—ã
                discoveredFoodPositions.Add(closestVisibleFood);
                Debug.Log($"[DeerAgent] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –µ–¥–∞! –ù–∞–≥—Ä–∞–¥–∞: +{rewardPerFoodDiscovery}");
            }
            
            // 2. –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ü–†–ò–ë–õ–ò–ñ–ï–ù–ò–ï –∫ –µ–¥–µ (—É–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ)
            if (lastDistanceToFood > 0)
            {
                float distanceChange = lastDistanceToFood - closestFoodDistance;
                if (distanceChange > 0.1f) // –õ—é–±–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
                {
                    float approachReward = rewardPerFoodApproach * distanceChange;
                    reward += approachReward;
                    Debug.Log($"[DeerAgent] –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –µ–¥–µ: {distanceChange:F2}–º, –Ω–∞–≥—Ä–∞–¥–∞: +{approachReward:F2}");
                }
                else if (distanceChange < -0.3f) // –®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç–¥–∞–ª–µ–Ω–∏–µ –æ—Ç –µ–¥—ã
                {
                    reward += rewardPerFoodApproach * distanceChange * 0.5f; // –ú–µ–Ω—å—à–∏–π —à—Ç—Ä–∞—Ñ
                }
            }
            
            // 3. –ë–û–õ–¨–®–ê–Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ç–æ, —á—Ç–æ –≤–∏–¥–∏–º –µ–¥—É
            reward += rewardForSeeingFood;
            
            lastDistanceToFood = closestFoodDistance;
        }
        else
        {
            lastDistanceToFood = -1f; // –°–±—Ä–æ—Å –µ—Å–ª–∏ –µ–¥—ã –Ω–µ –≤–∏–¥–∏–º
            
            // –®–¢–†–ê–§ –∑–∞ —Ç–æ, —á—Ç–æ –ù–ï –≤–∏–¥–∏–º –µ–¥—É (–¥–æ–ª–∂–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–∫–∞—Ç—å!)
            reward += -0.1f;
        }
        
        // === 4. –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ï –ù–ê–ì–†–ê–î–´ –ó–ê –ü–û–ï–î–ê–ù–ò–ï –ï–î–´! ===
        if (foodTakenByMemory)
        {
            reward += rewardPerMemoryFoodEaten; // –û–ì–†–û–ú–ù–ê–Ø –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –µ–¥—É —á–µ—Ä–µ–∑ –ø–∞–º—è—Ç—å!
            foodTakenByMemory = false;
            lastFoodTime = Time.time;
        }
        else if (foodTakenByHead)
        {
            reward += rewardPerFoodEaten; // –û–ì–†–û–ú–ù–ê–Ø –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å—ä–µ–¥–µ–Ω–Ω—É—é –µ–¥—É!
            foodTakenByHead = false;
            lastFoodTime = Time.time;
        }
        
        // === 5. –®–¢–†–ê–§ –ó–ê –î–û–õ–ì–û–ï –û–¢–°–£–¢–°–¢–í–ò–ï –ï–î–´ ===
        float timeSinceFood = Time.time - lastFoodTime;
        if (timeSinceFood > timeWithoutFoodThreshold)
        {
            // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Ä–∞—Å—Ç—É—â–∏–π —à—Ç—Ä–∞—Ñ –∑–∞ –≥–æ–ª–æ–¥
            float hungerPenalty = penaltyForNoFood * Mathf.Pow(1.2f, timeSinceFood - timeWithoutFoodThreshold);
            reward += hungerPenalty * Time.deltaTime;
        }
        
        // === 6. –ë–ï–ó –®–¢–†–ê–§–û–í –ó–ê –î–ï–†–ì–ê–ù–û–°–¢–¨ - –ú–û–ñ–ù–û –î–ï–†–ì–ê–¢–¨–°–Ø! ===
        // –£–±–∏—Ä–∞–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ –¥–µ—Ä–≥–∞–Ω–æ—Å—Ç—å - –ø—É—Å—Ç—å –æ–ª–µ–Ω—å —Å–≤–æ–±–æ–¥–Ω–æ –∏—â–µ—Ç –µ–¥—É
        // if (jitterSum > 0.5f)
        // {
        //     reward += penaltyForJitter * (jitterSum / 5f);
        // }

        
        // === 7. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–• ===
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–¥—Ä–∞
        lastPosition = currentPosition;
        lastHeadYaw = _vision.headYaw;
        lastBodyYaw = transform.eulerAngles.y;
        jitterSum = 0f;
        
        return reward;
    }

    // --- –ë–ï–ó –®–¢–†–ê–§–û–í –ó–ê –ö–û–õ–õ–ò–ó–ò–ò - –ü–£–°–¢–¨ –û–õ–ï–ù–¨ –°–í–û–ë–û–î–ù–û –î–í–ò–ñ–ï–¢–°–Ø! ---
    void OnTriggerEnter(Collider other)
    {
        // –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–ª–ª–∏–∑–∏–∏ - –Ω–∏–∫–∞–∫–∏—Ö —à—Ç—Ä–∞—Ñ–æ–≤!
        // –û–ª–µ–Ω—å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ–∏—Å–∫–µ –µ–¥—ã
    }

    void OnCollisionEnter(Collision col)
    {
        // –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è - –Ω–∏–∫–∞–∫–∏—Ö —à—Ç—Ä–∞—Ñ–æ–≤!
        // –û–ª–µ–Ω—å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ–∏—Å–∫–µ –µ–¥—ã
    }

    private Vector2Int WorldToCell(Vector3 pos, float cellSize)
    {
        return new Vector2Int(
            Mathf.FloorToInt(pos.x / cellSize),
            Mathf.FloorToInt(pos.z / cellSize)
        );
    }

    public override void OnInfo(object info)
    {
        if (info is Dictionary<string, object> d)
        {
            if (d.ContainsKey("stage"))
            {
                // stage = 1, 2, 3 –∏ —Ç.–¥. (–ø—Ä–∏–º–µ—Ä)
            }
        }
    }

    void Update()
    {
#if UNITY_EDITOR
        if (Input.GetKeyDown(KeyCode.F12))
        {
            Debug.Log($"[RLAgent] headYaw={_vision.headYaw} visited {visitedCells.Count} cells");
        }
#endif
    }
}
